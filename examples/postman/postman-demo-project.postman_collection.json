{
	"info": {
		"_postman_id": "82e81212-d58d-43bc-8574-83231bb36af3",
		"name": "postman-demo-project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22114666"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "getUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var schema = {",
									"    type: 'array',",
									"    items: {",
									"        type: 'object',",
									"        required: ['username', 'id', 'createdAt', 'updatedAt'],",
									"        properties: {",
									"            username: {",
									"                type: 'string',",
									"                minLength: 1",
									"            },",
									"            id: {",
									"                type: 'string',",
									"                minLength: 1",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var schema = {",
									"    type: 'object',",
									"    required: ['username', 'id', 'createdAt', 'updatedAt'],",
									"    properties: {",
									"        username: {",
									"            type: 'string',",
									"            minLength: 1",
									"        },",
									"        id: {",
									"            type: 'string',",
									"            minLength: 1",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.collectionVariables.set('userId', pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomFirstName}}{{$randomLastName}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var schema = {",
									"    type: 'object',",
									"    required: ['username', 'id', 'createdAt', 'updatedAt'],",
									"    properties: {",
									"        username: {",
									"            type: 'string',",
									"            minLength: 1",
									"        },",
									"        id: {",
									"            type: 'string',",
									"            minLength: 1",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "graphQL",
			"item": [
				{
					"name": "getUsers (with visualisation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('contains more than one user', function() {",
									"    pm.response.body.json().json().data.to.have.property('allUsers');",
									"});",
									"",
									"var template = `",
									"    <table bgcolor=\"#FFFFFF\">",
									"        <tr>",
									"            <th>id</th>",
									"            <th>username</th>",
									"        </tr>",
									"",
									"        {{#each response.data.allUsers}}",
									"            <tr>",
									"                <td>{{id}}</td>",
									"                <td>{{username}}</td>",
									"            </tr>",
									"        {{/each}}",
									"    </table>",
									"`;",
									"// Set visualizer",
									"pm.visualizer.set(template, {",
									"    // Pass the response body parsed as JSON as `data`",
									"    response: pm.response.json()",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\n    allUsers{\n        id\n        username\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});",
					"pm.test(\"Response time is less than 500ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		}
	]
}